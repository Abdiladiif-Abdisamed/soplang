name: Soplang Release Automation

on:
  push:
    branches:
      - "release/v*"

# Add explicit permissions for the GITHUB_TOKEN
permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  draft-release:
    name: Draft Release Process
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for changelog generation
          # Add token for checkout to allow pushing later
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Extract version from branch name
        id: extract_version
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          VERSION=${BRANCH_NAME#release/}
          # Remove v prefix if present (for file naming)
          VERSION_NUM=${VERSION#v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION_NUM=$VERSION_NUM" >> $GITHUB_ENV
          echo "Version extracted: $VERSION (number: $VERSION_NUM)"

      # Update the CHANGELOG.md file
      - name: Install changelog generator
        run: |
          pip install gitchangelog pystache
          echo "Using gitchangelog for changelog generation"

      - name: Create or update CHANGELOG.md
        id: changelog
        run: |
          # Check if CHANGELOG.md exists, create it if it doesn't
          if [ ! -f CHANGELOG.md ]; then
            echo "# CHANGELOG" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "FIRST_RUN=true" >> $GITHUB_ENV
          else
            echo "FIRST_RUN=false" >> $GITHUB_ENV
          fi

          # Generate changelog for the current version
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            # No previous tag, generate changelog from the beginning
            echo "No previous tag found, generating changelog from first commit"
            FIRST_COMMIT=$(git rev-list --max-parents=0 HEAD)
            CHANGELOG_CONTENT=$(gitchangelog $FIRST_COMMIT..HEAD || echo "- Initial release")

            # For first release with no tags, force CHANGELOG_CHANGED to true
            echo "CHANGELOG_FORCED=true" >> $GITHUB_ENV
          else
            # Generate changelog since the last tag
            echo "Generating changelog since tag $PREV_TAG"
            CHANGELOG_CONTENT=$(gitchangelog $PREV_TAG..HEAD || echo "- No notable changes")
            echo "CHANGELOG_FORCED=false" >> $GITHUB_ENV
          fi

          # If we got no content from gitchangelog, provide a default entry
          if [ -z "$CHANGELOG_CONTENT" ]; then
            echo "No changelog content generated, using default"
            CHANGELOG_CONTENT="### Added\n- Initial release of Soplang ${{ env.VERSION }}"
          fi

          # Process the changelog content to add GitHub username links
          # This ensures usernames are properly linked in the CHANGELOG.md file
          PROCESSED_CHANGELOG=$(echo "$CHANGELOG_CONTENT" | sed -E 's/\[Mr Sharafdin\]/\[@sharafdin\]\(https:\/\/github.com\/sharafdin\)/g')

          # Remove "(unreleased)" text which causes confusion
          PROCESSED_CHANGELOG=$(echo "$PROCESSED_CHANGELOG" | sed -E 's/\(unreleased\)//g')

          # Create a new changelog entry
          echo "## [${{ env.VERSION }}] - $(date +'%Y-%m-%d')" > changelog_entry.md
          echo "" >> changelog_entry.md
          echo "$PROCESSED_CHANGELOG" >> changelog_entry.md
          echo "" >> changelog_entry.md

          # Check if CHANGELOG.md already has an Unreleased section
          if grep -q "## \[Unreleased\]" CHANGELOG.md; then
            echo "Found existing Unreleased section, inserting after it"
            # Generate a temporary file with the new content
            NEW_VERSION_ENTRY="## [${{ env.VERSION }}] - $(date +'%Y-%m-%d')"
            echo "$NEW_VERSION_ENTRY" > version_header.tmp
            echo "" >> version_header.tmp
            echo "$PROCESSED_CHANGELOG" >> version_header.tmp

            # Use a more YAML-friendly approach to insert after Unreleased section
            awk '/## \[Unreleased\]/{print; getline; if ($0 == "") print ""; system("cat version_header.tmp"); next}1' CHANGELOG.md > CHANGELOG.tmp
            mv CHANGELOG.tmp CHANGELOG.md
            rm version_header.tmp
          else
            echo "No existing Unreleased section, creating new format"
            # Create a temporary file for the unreleased and new version
            echo "## [Unreleased]" > header.tmp
            echo "" >> header.tmp
            echo "## [${{ env.VERSION }}] - $(date +'%Y-%m-%d')" >> header.tmp
            echo "" >> header.tmp
            echo "$PROCESSED_CHANGELOG" >> header.tmp

            # Insert after line 4 (after header text)
            sed -i '4r header.tmp' CHANGELOG.md
            rm header.tmp
          fi

          # Save the changelog entry for the release notes
          echo "CHANGELOG_ONLY<<EOF" >> $GITHUB_ENV
          echo "$PROCESSED_CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Create release template with download table and checklist
          echo "# 🚀 Soplang ${{ env.VERSION }} Release" > release_template.md
          echo "" >> release_template.md
          echo "## 🛠️ Downloads" >> release_template.md
          echo "" >> release_template.md
          echo "| Platform | File | Checksum |" >> release_template.md
          echo "|----------|------|----------|" >> release_template.md
          echo "| Windows  | [soplang-${{ env.VERSION_NUM }}-windows.exe](replace_with_actual_link) | TBD |" >> release_template.md
          echo "| Linux    | [soplang-${{ env.VERSION_NUM }}-linux.deb](replace_with_actual_link)   | TBD |" >> release_template.md
          echo "| macOS    | [soplang-${{ env.VERSION_NUM }}-macos.dmg](replace_with_actual_link)   | TBD |" >> release_template.md
          echo "" >> release_template.md

          echo "$PROCESSED_CHANGELOG" >> release_template.md
          echo "" >> release_template.md
          echo "## 📝 Release Checklist" >> release_template.md
          echo "" >> release_template.md
          echo "- [ ] Build Windows binary (soplang-${{ env.VERSION_NUM }}-windows.exe)" >> release_template.md
          echo "- [ ] Build Linux binary (soplang-${{ env.VERSION_NUM }}-linux.deb)" >> release_template.md
          echo "- [ ] Build macOS binary (soplang-${{ env.VERSION_NUM }}-macos.dmg)" >> release_template.md
          echo "- [ ] Upload all binaries as assets" >> release_template.md
          echo "- [ ] Calculate and add SHA256 checksums to the table" >> release_template.md
          echo "- [ ] Remove this checklist section" >> release_template.md
          echo "- [ ] Publish the release" >> release_template.md

          # Save full release template for the draft
          RELEASE_TEMPLATE=$(cat release_template.md)
          echo "RELEASE_TEMPLATE<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_TEMPLATE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Check if CHANGELOG.md changed
          if [[ $(git status --porcelain CHANGELOG.md | wc -l) -gt 0 || "${{ env.FIRST_RUN }}" == "true" || "${{ env.CHANGELOG_FORCED }}" == "true" ]]; then
            echo "CHANGELOG_CHANGED=true" >> $GITHUB_ENV
          else
            echo "CHANGELOG_CHANGED=false" >> $GITHUB_ENV
          fi

      # Use direct commit approach with proper GitHub bot identity
      - name: Commit updated changelog
        if: env.CHANGELOG_CHANGED == 'true'
        run: |
          echo "Changelog changed, committing updates..."
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add CHANGELOG.md
          git commit -m "chore: update changelog for ${{ env.VERSION }}"
          git push
          echo "Changelog committed and pushed successfully"

      - name: Debug changelog status
        run: |
          echo "CHANGELOG_CHANGED: ${{ env.CHANGELOG_CHANGED }}"
          echo "FIRST_RUN: ${{ env.FIRST_RUN }}"
          echo "CHANGELOG_FORCED: ${{ env.CHANGELOG_FORCED }}"
          echo "CHANGELOG.md status:"
          git status --porcelain CHANGELOG.md

      # Create a Draft GitHub Release
      - name: Create git tag
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag -a ${{ env.VERSION }} -m "Release ${{ env.VERSION }}"
          git push origin ${{ env.VERSION }}

      - name: Create GitHub Draft Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: "Soplang ${{ env.VERSION }}"
          body: ${{ env.RELEASE_TEMPLATE }}
          draft: true
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Release status
        run: |
          echo "✅ Release ${{ env.VERSION }} draft created successfully!"
          echo "  - Changelog updated with direct commit"
          echo "  - GitHub Release draft created with tag ${{ env.VERSION }}"
          echo "  - Please upload binaries manually and publish the release"
