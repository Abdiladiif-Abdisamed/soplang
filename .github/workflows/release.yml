name: Soplang Release Automation

on:
  push:
    branches:
      - "release/v*"

jobs:
  draft-release:
    name: Draft Release Process
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for changelog generation

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Extract version from branch name
        id: extract_version
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          VERSION=${BRANCH_NAME#release/}
          # Remove v prefix if present (for file naming)
          VERSION_NUM=${VERSION#v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION_NUM=$VERSION_NUM" >> $GITHUB_ENV
          echo "Version extracted: $VERSION (number: $VERSION_NUM)"

      # Update the CHANGELOG.md file
      - name: Install changelog generator
        run: |
          pip install gitchangelog pystache
          echo "Using gitchangelog for changelog generation"

      - name: Create or update CHANGELOG.md
        id: changelog
        run: |
          # Check if CHANGELOG.md exists, create it if it doesn't
          if [ ! -f CHANGELOG.md ]; then
            echo "# CHANGELOG" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          # Generate changelog for the current version
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            # No previous tag, generate changelog from the beginning
            CHANGELOG_CONTENT=$(gitchangelog HEAD)
          else
            # Generate changelog since the last tag
            CHANGELOG_CONTENT=$(gitchangelog $PREV_TAG..HEAD)
          fi

          # Create a new changelog entry
          echo "## [${{ env.VERSION }}] - $(date +'%Y-%m-%d')" > changelog_entry.md
          echo "" >> changelog_entry.md
          echo "$CHANGELOG_CONTENT" >> changelog_entry.md
          echo "" >> changelog_entry.md

          # Insert the new entry after the header
          awk 'NR==4{print "## [Unreleased]\n"}1' CHANGELOG.md > temp_changelog
          sed -i '4 r changelog_entry.md' temp_changelog
          mv temp_changelog CHANGELOG.md

          # Save the changelog entry for the release notes
          CHANGELOG_ONLY=$(cat changelog_entry.md)
          echo "CHANGELOG_ONLY<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG_ONLY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Create release template with download table and checklist
          echo "# 🚀 Soplang ${{ env.VERSION }} Release" > release_template.md
          echo "" >> release_template.md
          echo "## 🛠️ Downloads" >> release_template.md
          echo "" >> release_template.md
          echo "| Platform | File | Checksum |" >> release_template.md
          echo "|----------|------|----------|" >> release_template.md
          echo "| Windows  | [soplang-${{ env.VERSION_NUM }}-windows.exe](replace_with_actual_link) | TBD |" >> release_template.md
          echo "| Linux    | [soplang-${{ env.VERSION_NUM }}-linux.deb](replace_with_actual_link)   | TBD |" >> release_template.md
          echo "| macOS    | [soplang-${{ env.VERSION_NUM }}-macos.dmg](replace_with_actual_link)   | TBD |" >> release_template.md
          echo "" >> release_template.md
          echo "## 📋 Changelog" >> release_template.md
          echo "" >> release_template.md
          echo "$CHANGELOG_CONTENT" >> release_template.md
          echo "" >> release_template.md
          echo "## 📝 Release Checklist" >> release_template.md
          echo "" >> release_template.md
          echo "- [ ] Build Windows binary (soplang-${{ env.VERSION_NUM }}-windows.exe)" >> release_template.md
          echo "- [ ] Build Linux binary (soplang-${{ env.VERSION_NUM }}-linux.deb)" >> release_template.md
          echo "- [ ] Build macOS binary (soplang-${{ env.VERSION_NUM }}-macos.dmg)" >> release_template.md
          echo "- [ ] Upload all binaries as assets" >> release_template.md
          echo "- [ ] Calculate and add SHA256 checksums to the table" >> release_template.md
          echo "- [ ] Remove this checklist section" >> release_template.md
          echo "- [ ] Publish the release" >> release_template.md

          # Save full release template for the draft
          RELEASE_TEMPLATE=$(cat release_template.md)
          echo "RELEASE_TEMPLATE<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_TEMPLATE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Check if CHANGELOG.md changed
          if [[ $(git status --porcelain CHANGELOG.md | wc -l) -gt 0 ]]; then
            echo "CHANGELOG_CHANGED=true" >> $GITHUB_ENV
          else
            echo "CHANGELOG_CHANGED=false" >> $GITHUB_ENV
          fi

      - name: Commit updated changelog
        if: env.CHANGELOG_CHANGED == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "chore: update changelog for ${{ env.VERSION }}"
          git push

      # Create a Draft GitHub Release
      - name: Create git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ env.VERSION }} -m "Release ${{ env.VERSION }}"
          git push origin ${{ env.VERSION }}

      - name: Create GitHub Draft Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: "Soplang ${{ env.VERSION }}"
          body: ${{ env.RELEASE_TEMPLATE }}
          draft: true
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Release status
        run: |
          echo "✅ Release ${{ env.VERSION }} draft created successfully!"
          echo "  - Changelog updated"
          echo "  - GitHub Release draft created with tag ${{ env.VERSION }}"
          echo "  - Please upload binaries manually and publish the release"
